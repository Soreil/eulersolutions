package main

//Problem:
//
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?

import "fmt"

//import "math"
import "os"
import "strconv"

func get_triangulars(n int) []int {
	list := make([]int, n+1)
	for i := 1; i < n+1; i++ {
		list[i] = list[i-1] + i
	}
	return list
}

func factor(n int) []int {
	list := make([]int, 0)
	for i := 1; i <= n; i++ {
		if n%i == 0 {
			list = append(list, i)
		}
	}
	return list
}

func main() {
	n, err := strconv.ParseInt(os.Args[1], 0, 0)
	if err != nil {
		panic(err)
	}
	max, err := strconv.ParseInt(os.Args[2], 0, 0)
	if err != nil {
		panic(err)
	}

	total := get_triangulars(int(n))
	var factors []int
	for i := 0; i <= int(n) && len(factors) <= int(max)+1; i++ {
		factors = factor(total[i])
	}
	if len(factors) > int(max) {
		fmt.Printf("Found triangle with over %d divisors!\n", max)
	}
	fmt.Printf("%dth term: %d\nnumber of divisors: %d\n%v\n", n, total[n], len(factors), factors)
}
